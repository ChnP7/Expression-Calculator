(**********************************************
 * eval.ml
 *
 * Takes the AST generated by the parser, 
 * and uses the information to evaluate an 
 * expression. For simplicity, all ints
 * are converted to floats.
 *
 * TODO: Divide by Zero Error
 *
 ***********************************************)
 
 open Treetype
 open Helpers
 open Tokentypes
 
 
 
 let rec eval_expr expr =
	match expr with
	| Value (Int i) -> float_of_int i
	| Value (Float f) -> f
	| Add (e1, e2) -> (eval_expr e1) +. (eval_expr e2)
	| Sub (e1, e2) -> (eval_expr e1) -. (eval_expr e2)
	| Mult (e1, e2) -> (eval_expr e1) *. (eval_expr e2)
	| Div (e1, e2) -> (eval_expr e1) /. (eval_expr e2)
	
	(* May be inaccurate if power is a float, since its converted to an int *)
	| Exp (e1, e2) -> (pow (eval_expr e1) (int_of_float (eval_expr e2)))
 
 
 let eval (ast: 'a * expr) = 
	match ast with
	| ([], expr) -> eval_expr expr
	| _ -> raise (InvalidInputException "Invalid Input")
	
	
