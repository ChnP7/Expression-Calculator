(**********************************************
 * eval.ml
 *
 * Takes the AST generated by the parser, 
 * and uses the information to evaluate an 
 * expression.
 *
 * TODO: Divide by Zero Error
 *
 ***********************************************)
 
 open Treetype
 open Helpers
 
 let rec eval_expr expr =
	match expr with
	| Value (Int i) -> i
	| Add (e1, e2) -> (eval_expr e1) + (eval_expr e2)
	| Sub (e1, e2) -> (eval_expr e1) - (eval_expr e2)
	| Mult (e1, e2) -> (eval_expr e1) * (eval_expr e2)
	| Div (e1, e2) -> (eval_expr e1) / (eval_expr e2)
	| Exp (e1, e2) -> (pow (eval_expr e1) (eval_expr e2))
	| _ -> 2
 
 
 let eval (ast: 'a * expr) = 
	match ast with
	| ([], expr) -> eval_expr expr
	| _ -> 0
	
	
